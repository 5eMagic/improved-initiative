module ImprovedInitiative {
  export class Command {
    Description: string;
    KeyBinding: string;
    ActionBarIcon: string;
    GetActionBinding: () => any;
    ShowOnActionBar: KnockoutObservable<boolean>;
  }
  
  export var BuildCommandList = (c: Commander) => [
      { Description: 'Roll Initiative', 
        KeyBinding: 'alt+r',
        ActionBarIcon: 'fa-play', 
        GetActionBinding: () => c.RollInitiative,
        ShowOnActionBar: ko.observable(true) },
      { Description: 'Open Creature Library', 
        KeyBinding: 'alt+a',
        ActionBarIcon: 'fa-user-plus', 
        GetActionBinding: () => c.ShowLibraries,
        ShowOnActionBar: ko.observable(true) },
      { Description: 'Show Player Window', 
        KeyBinding: 'alt+w',
        ActionBarIcon: 'fa-users', 
        GetActionBinding: () => c.LaunchPlayerWindow,
        ShowOnActionBar: ko.observable(true) },
      { Description: 'Select Next Combatant', 
        KeyBinding: 'j',
        ActionBarIcon: 'fa-arrow-down', 
        GetActionBinding: () => c.SelectNextCombatant,
        ShowOnActionBar: ko.observable(false) },
      { Description: 'Select Previous Combatant', 
        KeyBinding: 'k',
        ActionBarIcon: 'fa-arrow-up', 
        GetActionBinding: () => c.SelectPreviousCombatant,
        ShowOnActionBar: ko.observable(false) },
      { Description: 'Next Turn', 
        KeyBinding: 'n',
        ActionBarIcon: 'fa-step-forward', 
        GetActionBinding: () => c.NextTurn,
        ShowOnActionBar: ko.observable(true) },
      { Description: 'Previous Turn', 
        KeyBinding: 'alt+n',
        ActionBarIcon: 'fa-step-backward', 
        GetActionBinding: () => c.PreviousTurn,
        ShowOnActionBar: ko.observable(false) },
      { Description: 'Damage/Heal Selected Combatant', 
        KeyBinding: 't',
        ActionBarIcon: 'fa-plus-circle', 
        GetActionBinding: () => c.FocusSelectedCreatureHP,
        ShowOnActionBar: ko.observable(false) },
      { Description: 'Add Note to Selected Combatant', 
        KeyBinding: 'g',
        ActionBarIcon: 'fa-tag', 
        GetActionBinding: () => c.AddSelectedCreatureTag,
        ShowOnActionBar: ko.observable(false) },
      { Description: 'Remove Selected Combatant from Encounter', 
        KeyBinding: 'del',
        ActionBarIcon: 'fa-remove', 
        GetActionBinding: () => c.RemoveSelectedCreatures,
        ShowOnActionBar: ko.observable(false) },
      { Description: 'Rename Selected Combatant', 
        KeyBinding: 'f2',
        ActionBarIcon: 'fa-i-cursor', 
        GetActionBinding: () => c.EditSelectedCreatureName,
        ShowOnActionBar: ko.observable(false) },
      { Description: 'Edit Selected Combatant', 
        KeyBinding: 'alt+e',
        ActionBarIcon: 'fa-edit', 
        GetActionBinding: () => c.EditSelectedCreature,
        ShowOnActionBar: ko.observable(false) },
      { Description: 'Edit Selected Combatant Initiative', 
        KeyBinding: 'alt+i',
        ActionBarIcon: 'fa-play-circle-o', 
        GetActionBinding: () => c.EditSelectedCreatureInitiative,
        ShowOnActionBar: ko.observable(false) },
      { Description: 'Move Selected Combatant Down', 
        KeyBinding: 'alt+j',
        ActionBarIcon: 'fa-angle-double-down', 
        GetActionBinding: () => c.MoveSelectedCreatureDown,
        ShowOnActionBar: ko.observable(false) },
      { Description: 'Move Selected Combatant Up', 
        KeyBinding: 'alt+k',
        ActionBarIcon: 'fa-angle-double-up', 
        GetActionBinding: () => c.MoveSelectedCreatureUp,
        ShowOnActionBar: ko.observable(false) },
      { Description: 'Add Temporary HP', 
        KeyBinding: 'alt+t',
        ActionBarIcon: 'fa-medkit', 
        GetActionBinding: () => c.AddSelectedCreaturesTemporaryHP,
        ShowOnActionBar: ko.observable(false) },
      { Description: 'Save Encounter', 
        KeyBinding: 'alt+s',
        ActionBarIcon: 'fa-save', 
        GetActionBinding: () => c.SaveEncounter,
        ShowOnActionBar: ko.observable(true) },
      { Description: 'Show Help and Keybindings', 
        KeyBinding: '?',
        ActionBarIcon: 'fa-question-circle', 
        GetActionBinding: () => c.ToggleCommandDisplay,
        ShowOnActionBar: ko.observable(true) }
    ]
}